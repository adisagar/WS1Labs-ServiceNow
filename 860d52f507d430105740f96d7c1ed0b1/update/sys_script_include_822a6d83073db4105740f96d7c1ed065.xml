<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_646971_uemconn_0.ws1_get_action_from_os</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>ws1_get_action_from_os</name>
        <script><![CDATA[function get_os_field(device_id) {  
	var config_table = new GlideRecord("cmdb_ci");
	config_table.addQuery("sys_id", device_id);

	var status_code;
	var error_log;
	var res;
	config_table.query();
	
	if (config_table.next()) {

		var class_name = config_table.sys_class_name;

			var child_table;
			if (class_name == 'cmdb_ci_computer') {
				child_table = new GlideRecord("cmdb_ci_computer");
			} else if (class_name == 'cmdb_ci_handheld_computing') {
				child_table = new GlideRecord("cmdb_ci_handheld_computing");
			} else {
				error_log = 'OS for device ' + device_id + ' not found in type ' + class_name;
				jslog(error_log);
				
				return '';
			}
			
			child_table.addQuery("sys_id", device_id);

			child_table.query();

			if (child_table.next()) {
				var os_name = child_table.os;
				var os_version = child_table.os_version;
				
				return {'os_name' : os_name, 'os_version' : os_version};
			}

		} else {

		error_log = 'Error with request ' + 'ws1_uem_get_os_field' + ' when querying device ' + device_id;
		jslog(error_log);

		return '';
	}
   }

function util_compare_versions(version_a, version_b) {
	
	if ((!version_a) || (!version_b)) {
		return 0;
	}
	
	var sub_versions_a = version_a.split(".").map(Number);
	
	var sub_versions_b = version_b.split(".").map(Number);
	
	if (sub_versions_a.length < sub_versions_b.length) {
		sub_versions_a = sub_versions_a.concat(Array.apply(null, Array(sub_versions_b.length - sub_versions_a.length)).map(function(){return 0;}));
	} else 	if (sub_versions_b.length < sub_versions_a.length) {
		sub_versions_b = sub_versions_b.concat(Array.apply(null, Array(sub_versions_a.length - sub_versions_b.length)).map(function(){return 0;}));
	}
	
	for (var i = 0; i < Math.min(sub_versions_a.length, sub_versions_b.length); i++) {
		if (sub_versions_a[i] > sub_versions_b[i]) {
			return 1;
		}
		
		if (sub_versions_a[i] < sub_versions_b[i]) {
			return -1;
		}
	}
	
	return 0;
}

var ws1_get_action_from_os = Class.create();
ws1_get_action_from_os.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
   get_action:function() {
		var session_id = this.getParameter('sysparm_sid');
		var uem_version = gs.getProperty('x_646971_uemconn_0.WS1UEM Platform');

		var INCIDENT_TABLE_NAME = "incident";

		var DEVICE_TABLE_NAME = "cmdb_ci";

		var TABLE_NAME = "x_646971_uemconn_0_ws1_action_os_mapping";

		var app = new GlideRecord(INCIDENT_TABLE_NAME);
		app.addQuery('sys_id', session_id);
		app.query();

		var os_name;
		var os_version;
		if (app.next()) {
			var device_id = app.getValue(DEVICE_TABLE_NAME);

			var os_json = get_os_field(device_id);
			os_name = os_json['os_name'];
			os_version = os_json['os_version'];

			os_name = os_name.toLowerCase();

			if (os_name == '') {
				return '';
			}

			if (os_name.includes('mac')) {
				os_name = 'mac';
			} else if (os_name.includes('android')) {
				os_name = 'android';
			} else if (os_name.includes('ios')) {
				os_name = 'ios';
			} else if (os_name.includes('windows 10')) {
				if (os_name.includes('10')) {
					if (os_name.includes('home')) {
						os_name = 'windows10_home';
					} else if (os_name.includes('education')) {
						os_name = 'windows10_education';
					} else if (os_name.includes('pro')) {
						os_name = 'windows10_pro';
					} else if (os_name.endsWith('s')) {
						os_name = 'windows10_s';
					} else {
						os_name = 'windows10_enterprise';
					}
				} else if (os_name.includes('windows')) {
					os_name = 'winrt';
				}
			}
		}

		var action_visibility_conditions = {};
	
		var fields = new GlideRecord('sys_dictionary');
		fields.addQuery('name', TABLE_NAME);
		fields.query();
		while(fields.next())
		{
			action_visibility_conditions[fields.element.toString()] = false;
		}

		var mapTable = new GlideRecord(TABLE_NAME);
		mapTable.addQuery("os_action", os_name);
		mapTable.orderByDesc("precedent");
		mapTable.query();

		gs.info("Querying WS1 actions for OS " + os_name + ' : ' + os_version + " - UEM : " + uem_version);

		try {
			while(mapTable.next()) {
				
				var min_os = mapTable.getValue('min_os');
				var max_os = mapTable.getValue('max_os');
				
// 				gs.info('comp0 ' + util_compare_versions(os_version, min_os))
// 				gs.info('comp1 ' + util_compare_versions(os_version, max_os))				
				
				if ((util_compare_versions(os_version, min_os) >= 0) && 
					(util_compare_versions(os_version, max_os) <= 0)) {

					for (var key in action_visibility_conditions) {
						var actionValue = mapTable.getValue(key);

						if (actionValue == 'true') {
							action_visibility_conditions[key] = true;
						}
					}
				}
			}

			gs.info('OS based actions: ' + JSON.stringify(action_visibility_conditions));
			return JSON.stringify(action_visibility_conditions);
	} catch (err) {
		return "Error: " + err + " when querying WS! actions for OS " + os_name + "";
	}
   } ,
   _privateFunction: function() { // this function is not client callable     
    }
 });]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-08-10 14:50:09</sys_created_on>
        <sys_id>822a6d83073db4105740f96d7c1ed065</sys_id>
        <sys_mod_count>129</sys_mod_count>
        <sys_name>ws1_get_action_from_os</sys_name>
        <sys_package display_value="WS1UEMSpoke" source="x_646971_uemconn_0">860d52f507d430105740f96d7c1ed0b1</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="WS1UEMSpoke">860d52f507d430105740f96d7c1ed0b1</sys_scope>
        <sys_update_name>sys_script_include_822a6d83073db4105740f96d7c1ed065</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-08-17 18:52:11</sys_updated_on>
    </sys_script_include>
</record_update>
