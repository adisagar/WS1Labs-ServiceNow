<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_646971_uemconn_0.ws1_get_action_from_os</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <name>ws1_get_action_from_os</name>
        <script><![CDATA[var ws1_get_action_from_os = Class.create();
ws1_get_action_from_os.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
   get_action:function() {
	   var os_name = this.getParameter('sysparm_os_name');
	   var TABLE_NAME = "x_646971_uemconn_0_ws1_action_os_mapping";

	   var action_visibility_conditions = {}/*'assist' : false, 
										   'assist_filemanager' : false, 
										   'assist_remoteshell' : false,
										   'assist_screenshare' : false,
										   'change_passcode' : false, 
										   'device_wipe' : false,
										   'device_wipe_unlockpin' : false,
										   'enterprise_wipe' : false,
										   'lock' : false
										  };*/
	
	var fields = new GlideRecord('sys_dictionary');
	fields.addQuery('name', TABLE_NAME);
	fields.query();
	while(fields.next())
	{
		action_visibility_conditions[fields.element.toString()] = false
	}

	var mapTable = new GlideRecord(TABLE_NAME);
	mapTable.addQuery("os_action", os_name);
	mapTable.orderByDesc("precedent");
	mapTable.query();
	gs.info('num rows ' + mapTable.getRowCount());
	try {
		while(mapTable.next()) {
			gs.info('demo -> ');

			for (var key in action_visibility_conditions) {
				var actionValue = mapTable.getValue(key);

				if (key == 'devicewipe_mac') {
					gs.info('devicewipe ' + actionValue);
				}
				if (actionValue == 'true') {
					action_visibility_conditions[key] = true;
				}
				
				//gs.info("key " + key + " actionValue " + actionValue);
				// gs.info('key ' + key + ' actionValue ' + actionValue);
			}
		}
		for (var key in action_visibility_conditions) {
			gs.info('key ' + key + ' value ' + action_visibility_conditions[key]);
		}

		gs.info('JSON stringify ' + JSON.stringify(action_visibility_conditions));
		return JSON.stringify(action_visibility_conditions);
	} catch (err) {
		return "Catch " + err + "!";
	}
   } ,
   _privateFunction: function() { // this function is not client callable     
    }
 });]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-08-10 14:50:09</sys_created_on>
        <sys_id>822a6d83073db4105740f96d7c1ed065</sys_id>
        <sys_mod_count>61</sys_mod_count>
        <sys_name>ws1_get_action_from_os</sys_name>
        <sys_package display_value="WS1UEMSpoke" source="x_646971_uemconn_0">860d52f507d430105740f96d7c1ed0b1</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="WS1UEMSpoke">860d52f507d430105740f96d7c1ed0b1</sys_scope>
        <sys_update_name>sys_script_include_822a6d83073db4105740f96d7c1ed065</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-08-11 19:26:15</sys_updated_on>
    </sys_script_include>
</record_update>
