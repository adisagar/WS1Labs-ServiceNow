<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_page">
    <sys_ui_page action="INSERT_OR_UPDATE">
        <category>general</category>
        <client_script><![CDATA[onLoad();

/**
WS1UEMPopup renders the dialog popup fields based on the UEM action
passed in from the calling page.
**/
function onLoad() {


    var ws1_actions_response;
    var action = $("ws1_action");
    var ga_test_action;
    var ga_test_json;

    /**
    For unit testing purposes, if an action is not provided,
    Test values are loaded in from the WS1 Testing table.
    **/
    if ((!action) || (action.value.includes("Undefined"))) {
        ga_test_action = new GlideAjax("x_vmw_ws1uem.WS1GetTestAction");
        ga_test_json = new GlideAjax("x_vmw_ws1uem.WS1TestOSActionsJSON");

        ga_test_action.addParam("sysparm_name", "get_test_action");
        ga_test_json.addParam("sysparm_name", "get_test_json");

		ga_test_action.getXML(function parse_response(response) {
            action = response.responseXML.documentElement.getAttribute("answer");

			ws1_actions_response = {};

            ga_test_json.getXML(function parse_json_response(response) {
                ws1_actions_response = response.responseXML.documentElement.getAttribute("answer");

                try {
                    ws1_actions_response = JSON.parse(ws1_actions_response);
				} catch (e) {
                    ws1_actions_response = {};
                }

                loadPopupContents(action, ws1_actions_response);
            });
        });
    } else {
        /**
        A JSON containing UEM configurations for an OS will be loaded in
        from the incidents page, previously stored by the the loading method.
        **/
		ws1_actions_response = $("incident.x_vmw_ws1uem_ws1_actions_response");

        ws1_actions_response = JSON.parse(ws1_actions_response.value);
        loadPopupContents(action.value, ws1_actions_response);
    }
}

/**
Based on the provided UEM Action configuration, set the state of
specific fields and as hidden or visible.
**/
function loadPopupContents(action, ws1_actions_response) {
    var stringText;
    var select_dropdown_id;
    var input_options = [];
    var key;
    var warningMessage;
    var actionMessage;
    var action_item_map;

    show_message(false);
    show_unlock_passcode(false);
    show_unlock_pin(false);
    show_ws1_alert(false);
    show_check(false);

    action = action.trim();

    action_item_map = {
		"assist" : "WS1UEMAssistInfo",
		"message" : "WS1UEMMessageInfo",
		"devicelogs" : "WS1UEMDeviceLogsInfo",
		"changepasscode" : "WS1UEMPasscodeInfo",
		"lock" : "WS1UEMLockInfo",
		"enterprisewipe" : "WS1UEMEnterpriseWipeInfo",
		"softreset" : "WS1UEMSoftResetInfo",
		"syncdevice" : "WS1UEMSyncDeviceInfo",
		"devicewipe" : "WS1UEMDeviceWipeInfo",
        "refreshdevices" : "WS1UEMRefreshDevices"
	};

    if (action in action_item_map) {
        actionMessage = action_item_map[action];
        stringText = getMessage(actionMessage);
    }

    if (action == "assist") {

        $("div_ws1_assist_type").hidden = false;

        select_dropdown_id = "input_ws1_assist_type";

        for (key in ws1_actions_response) {

            if (key.includes("assist_")) {

                if (!ws1_actions_response[key]) {
 
                    remove_actions_from_select_input(select_dropdown_id, key.substring(7));

                } else {
                    input_options.push(key.substring(7));
                }
            }
        }
        input_options.sort().reverse();

        if ($("input_ws1_assist_type").length == 0) {
            $("div_ws1_assist_type").hidden = true;
        } else {
            set_action_as_main_select_input(select_dropdown_id, input_options[0]);
        }

    } else if (action == "message") {

        show_submitdata(false);

        show_message(true);

    } else if (action == "changepasscode") {

        show_submitdata(false);

        show_unlock_passcode(true);

    } else if (action == "lock") {

        if (ws1_actions_response.lock_mac) {
            show_submitdata(false);

            show_unlock_pin(true);
            show_ws1_alert(true);
            set_alert_text(getMessage("WS1UEMRememberPin"));
        }
    } else if (action == "enterprisewipe") {

        show_check(true);

        show_submitdata(false);
        show_ws1_alert(true);
        set_alert_text(getMessage("WS1UEMWarningEnterpriseWipe"));

    } else if (action == "devicewipe") {

        warningMessage = getMessage("WS1UEMWarningDeviceWipe");

        if (ws1_actions_response.devicewipe_mac == true) {

            show_submitdata(false);

            show_unlock_pin(true);

            warningMessage = warningMessage + " " + getMessage("WS1UEMRememberPin");

        } else {

            show_check(true);

            show_submitdata(false);
        }

        show_ws1_alert(true);
        set_alert_text(warningMessage);
    }

    // display informational message for action type
    $("div_ws1_text").innerHTML = stringText;
    $("div_ws1_text").hidden = false;
}

function continueOK() {

    var action_inputs;
    var unlock_pin;
    var i;
    var pin_id;
    var pin_value;
    var sid;

    jslog("WS1UEM: continueOK");

    action_inputs = {};

    action_inputs.action = gel("ws1_action").value;

    unlock_pin = "";
    for (i = 0; i < 6; i += 1) {

        pin_id = "input_ws1_unlock_pin" + i;

        pin_value = gel(pin_id).value;

        unlock_pin = unlock_pin + pin_value;
    }

    action_inputs.unlockpin = unlock_pin;
    action_inputs.passcode = gel("input_ws1_passcode").value;
    action_inputs.message = gel("input_ws1_message").value;
    action_inputs.assisttype = gel("input_ws1_assist_type").value;
    sid = gel("sid").value;

    try {
        jslog("WS1UEM: sid " + sid);
        sid = g_form.getUniqueValue();
        jslog("WS1UEM: sid check " + sid);
        execute_action(sid, action_inputs, true);
    } catch (e) {
        sid = get_test_incident_record(action_inputs);
    }
}

function continueCancel() {
    GlideDialogWindow.get().destroy();
}

function execute_action(sid, action_inputs, set_form) {
    var str;
    str = getMessage("WS1UEMQueuing") + " " + getMessage("WS1UEMAction");

    jslog("WS1UEM: execute_action ");

    if (set_form == true) {
        jslog("WS1UEM: set_form " + set_form);

        // Set the values back to the incident form
        g_form.setValue("x_vmw_ws1uem_ws1_send_message", action_inputs.message);
        g_form.setValue("x_vmw_ws1uem_ws1_passcode", action_inputs.passcode);
        g_form.setValue("x_vmw_ws1uem_ws1_unlock_pin", action_inputs.unlockpin);
        g_form.setValue("x_vmw_ws1uem_ws1action", action_inputs.action);
        g_form.setValue("x_vmw_ws1uem_ws1_uem_assist_type", action_inputs.assisttype);
        g_form.setValue("x_vmw_ws1uem_response", str);
        g_form.save();
    }

    // Pass the values into the processing script
    gel("runprocessingscript").value = "actionflow";
    gel("sid").value = sid;
    gel("jvar_action").value = action_inputs.action;
    gel("jvar_passcode").value = action_inputs.passcode;
    gel("jvar_unlockpin").value = action_inputs.unlockpin;
    gel("jvar_messagetext").value = action_inputs.message;
    gel("jvar_assisttype").value = action_inputs.assisttype;
    gel("jvar_string").value = str;


    if (set_form) {
        GlideDialogWindow.get().destroy();
    }
}

function actioncallback(response) {
    var answer;
    alert("here");
    answer = response.responseXML.documentElement.getAttribute("answer");
}

/**
A test incident record will need to be obtained
if the application is being debugged with ATF tests.
**/
function get_test_incident_record(action_inputs) {
    var ga_test_incident = new GlideAjax("x_vmw_ws1uem.WS1GetIncidentRecord");
    var incident_record = null;

    ga_test_incident.addParam("sysparm_name", "get_incident");


    ga_test_incident.getXML(function parse_response(response) {
        incident_record = response.responseXML.documentElement.getAttribute("answer");
        execute_action(incident_record, action_inputs, false);
    });
}

/**
Version strings are compared level-by-level
between sub-versions strings in each.
**/
function util_compare_versions(version_a, version_b) {
    var i;
    var sub_versions_a = version_a.split(".").map(Number);
    var sub_versions_b = version_b.split(".").map(Number);

    if (sub_versions_a.length < sub_versions_b.length) {
        sub_versions_a = sub_versions_a.concat(Array(sub_versions_b.length - sub_versions_a.length).fill(0));
    } else if (sub_versions_b.length < sub_versions_a.length) {
        sub_versions_b = sub_versions_b.concat(Array(sub_versions_a.length - sub_versions_b.length).fill(0));
    }

    for (i = 0; i < Math.min(sub_versions_a.length, sub_versions_b.length); i += 1) {
        if (sub_versions_a[i] > sub_versions_b[i]) {
            return 1;
        }

        if (sub_versions_a[i] < sub_versions_b[i]) {
            return -1;
        }
    }

    return 0;
}

function parse_actions_as_json(response) {
    var answer = response.responseXML.documentElement.getAttribute("answer");

    var actions = JSON.parse(answer);

    if (actions.devicewipe_mac) {
        show_unlock_pin(true);
    } else {
        show_unlock_pin(false);
    }

    if (actions.changepasscode_winrt) {
        show_unlock_pin(true);
    } else {
        show_unlock_pin(false);
    }
}

/**
Remove dropdown menu items by option name
**/
function remove_actions_from_select_input(select_input, option_name) {
    var select_object = $(select_input);
    var i;

    for (i = 0; i < select_object.length; i += 1) {
        if (select_object.options[i].value.toLowerCase() == option_name) {
            select_object.remove(i);
        }
    }
}

/**
Set a dropdown menu item as default
**/
function set_action_as_main_select_input(select_input, option_name) {
    var i;
    var select_object = $(select_input);

    for (i = 0; i < select_object.length; i += 1) {

        if (select_object.options[i].value.toLowerCase() == option_name) {
            select_object.value = select_object.options[i].value;
        }
    }
}

/**
Validate that a 6-pin field has
non-empty values within valid range.
**/
function validatePin(pin, nextIndex) {

    var validPin = true;
    var i;
    var currentPinId;
    var currentPinValue;
    var pinInt;
    var nextPin;

    for (i = 0; i < 6; i += 1) {

        currentPinId = "input_ws1_unlock_pin" + i;

        currentPinValue = gel(currentPinId).value;

        if (currentPinValue == "") {
            validPin = false;
        } else {
            pinInt = parseInt(currentPinValue);
			
			if (isNaN(currentPinValue) || (pinInt < 0 || pinInt > 9)) {
				validPin = false;
                gel(currentPinId).value = "";
            } else {

                if (pin.id == currentPinId) {
                    nextPin = "input_ws1_unlock_pin" + nextIndex;
                    gel(nextPin).focus();
                }
            }
        }
    }
    if (validPin == true) {
        show_submitdata(true);
    } else {
        show_submitdata(false);
    }
}

/**
Validate that the passcode and confirm-passcode fields match
**/
function validatePasscode() {
    var passcode = gel("input_ws1_passcode").value;
    var passcodeConfirm = gel("input_ws1_passcode_confirm").value;

    if (passcode.length > 0 && passcode == passcodeConfirm) {
        show_submitdata(true);
    } else {
        show_submitdata(false);
    }
}

/**
Validate that the message field is non-empty
**/
function checkMessage() {
    var message = gel("input_ws1_message").value;

    if (message.length > 0) {
        show_submitdata(true);
    } else {
        show_submitdata(false);
    }
}

/**
Set the state of fields on the UEM dialog popup
**/
function checkStatus(checkbox) {
    show_submitdata(checkbox.checked);
}

function show_unlock_pin(showFlag) {
    var inputs;
    var i;
    $("div_ws1_unlock_pin").hidden = !showFlag;

    inputs = document.querySelector("#div_ws1_unlock_pin").getElementsByTagName("input");

    for (i = 0; i < inputs.length; i += 1) {
        inputs[i].readOnly = !showFlag;
    }
}

function show_unlock_passcode(showFlag) {
    var inputs;
    var i;
    $("div_ws1_passcode").hidden = !showFlag;

    inputs = document.querySelector("#div_ws1_passcode").getElementsByTagName("input");
    for (i = 0; i < inputs.length; i += 1) {
        inputs[i].readOnly = !showFlag;
    }
}

function show_message(showFlag) {
    var textareas;

    $("div_ws1_message").hidden = !showFlag;
    textareas = document.querySelector("#div_ws1_message").getElementsByTagName("textarea");
    if (textareas.length > 0) {
        textareas[0].readOnly = !showFlag;
    }
}

function show_ws1_alert(showFlag) {
    $("div_ws1_alert").hidden = !showFlag;
}

function show_submitdata(showFlag) {
    $("submitData").disabled = !showFlag;
}

function set_alert_text(text) {
    $("label_ws1_alert_text").innerHTML = text;
}
function show_check(showFlag) {
    var inputs;

    $("div_ws1_check").hidden = !showFlag;
    inputs = document.querySelector("#div_ws1_check").getElementsByTagName("input");
    if (inputs.length > 0) {
        inputs[0].readOnly = !showFlag;
    }
}]]></client_script>
        <description>Popup to enable WS1 UEM details to be captured</description>
        <direct>false</direct>
        <endpoint>x_vmw_ws1uem_WS1UEMPopup.do</endpoint>
        <html><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">
<g:ui_form>
	<style>
		.body {
			margin: 15px 10px;
		}
		
		.alert-section {
			margin: 15px 0;
			border: 1px solid red;
			border-radius: 0.3em;
			padding: 5px;
		}
		
		.section {
			margin: 10px 0;
		}
		
		.passcode-field {
			margin-top: 0.5em;
		}
		
		.assist-label {
			margin-right: 1em;
		}
		
		.passcode-label {
			min-width: 30%;
		}
		
		.confirm-field,
		.passcode-field,
		.assist-field,
		.pin-field {
			display: flex;
			align-items: center;
		}
		
		.pin-digit {
			text-align: center;
			margin: 0 2px;
		}
		
		.no-margin {
			margin: 0;
		}
		
		.warning-text {
			color: red;
		}
		
		.warning-icon {
			padding-right: 5px;
		}
	</style>

	<g:evaluate var="jvar_ws1_action" expression="RP.getWindowProperties().actionvalue" />
	<g:evaluate var="jvar_si" expression="RP.getWindowProperties().si" />
	<div sn-atf-class="SettableTestComponent">
		<input sn-atf-settable="true" type="hidden" id="ws1_action" name="ws1_action" value="${jvar_ws1_action}" />
		<input sn-atf-settable="true" type="hidden" id="sid" name="sid" value="${jvar_si}" />		
		<input type="hidden" id="runprocessingscript" name="runprocessingscript" value=""/>
		<input type="hidden" id="jvar_action" name="jvar_action" value=""/>
		<input type="hidden" id="jvar_passcode" name="jvar_passcode" value=""/>
		<input type="hidden" id="jvar_unlockpin" name="jvar_unlockpin" value=""/>
		<input type="hidden" id="jvar_messagetext" name="jvar_messagetext" value=""/>
		<input type="hidden" id="jvar_assisttype" name="jvar_assisttype" value=""/>
		<input type="hidden" id="jvar_string" name="jvar_string" value=""/>
		<input type="hidden" id="ws1_version" name="ws1_version" value="${gs.getProperty('x_vmw_ws1uem.WS1UEMPlatform')}"/>
	</div>
	
	<div class="body">
		<div id="div_ws1_text" hidden="true" />

		<div id="div_ws1_alert" class="alert-section" hidden="true" >
			<span class="warning-icon">
				<img src="indicator-incident.svg" width="15" height="15"/>
			</span>
			<span id="label_ws1_alert_text" class="warning-text"/>
		</div>

		<div id="div_ws1_message" class="section" hidden="true">
			<g:form_label>
				${gs.getMessage('WS1UEMMessageToSend')}
			</g:form_label>
			<textarea
				id="input_ws1_message"
				name="input_ws1_message"
				field="x_vmw_ws1uem_ws1_send_message"
				rows="5"
				cols="85"
				table="incident"
				mandatory="true"
				query="active=true"
				oninput="checkMessage()"
				onchange="checkMessage()">
			</textarea>
		</div>
		
		<div id="div_ws1_passcode" class="section" hidden="true">
			<div class="passcode-field">
				<div class="passcode-label">
					<g:form_label class="no-margin">
						${gs.getMessage('WS1UEMPasscode')}
					</g:form_label>
				</div>	
				<input
					id="input_ws1_passcode"
					name="input_ws1_passcode"
					field="x_vmw_ws1uem_ws1_passcode"
					type="password"
					table="incident"
					query="active=true"
					size="20"
					oninput="validatePasscode()"
					onchange="validatePasscode()"/>
			</div>
			<div class="passcode-field">
				<div class="passcode-label">
					<g:form_label class="no-margin">
						${gs.getMessage('WS1UEMConfirmPasscode')}
					</g:form_label>
				</div>	
				<input
					id="input_ws1_passcode_confirm"
					name="input_ws1_passcode_confirm"
					field="x_vmw_ws1uem_ws1_passcode"
					type="password"
					table="incident"
					query="active=true"
					size="20"
					oninput="validatePasscode()"
					onchange="validatePasscode()"/>
			</div>
		</div>
		
		<div id="div_ws1_unlock_pin" class="section" hidden="true">
			<div class="pin-field">
				<div class="passcode-label">
					<g:form_label class="passcode-label no-margin">
						${gs.getMessage('WS1UEMUnlockPin')}
					</g:form_label>
				</div>

				<input class="pin-digit" type="text" name="input_ws1_unlock_pin0" id="input_ws1_unlock_pin0" table="incident" mandatory="true" field="x_vmw_ws1uem_ws1_unlock_pin" query="active=true" size="1" maxlength="1" oninput = "validatePin(this, 1)" />
				<input class="pin-digit" type="text" name="input_ws1_unlock_pin1" id="input_ws1_unlock_pin1" table="incident" mandatory="true" field="x_vmw_ws1uem_ws1_unlock_pin" query="active=true" size="1" maxlength="1" oninput = "validatePin(this, 2)" />
				<input class="pin-digit" type="text" name="input_ws1_unlock_pin2" id="input_ws1_unlock_pin2" table="incident" mandatory="true" field="x_vmw_ws1uem_ws1_unlock_pin" query="active=true" size="1" maxlength="1" oninput = "validatePin(this, 3)" />
				<input class="pin-digit" type="text" name="input_ws1_unlock_pin3" id="input_ws1_unlock_pin3" table="incident" mandatory="true" field="x_vmw_ws1uem_ws1_unlock_pin" query="active=true" size="1" maxlength="1" oninput = "validatePin(this, 4)" />
				<input class="pin-digit" type="text" name="input_ws1_unlock_pin4" id="input_ws1_unlock_pin4" table="incident" mandatory="true" field="x_vmw_ws1uem_ws1_unlock_pin" query="active=true" size="1" maxlength="1" oninput = "validatePin(this, 5)" />
				<input class="pin-digit" type="text" name="input_ws1_unlock_pin5" id="input_ws1_unlock_pin5" table="incident" mandatory="true" field="x_vmw_ws1uem_ws1_unlock_pin" query="active=true" size="1" maxlength="1" oninput = "validatePin(this, '5')" />
			</div>
		</div>
		
		<div id="div_ws1_assist_type" class="section" hidden="false">
			<div class="assist-field">
				<div class="assist-label">
					<g:form_label class="no-margin">
						${gs.getMessage('WS1UEMAssistType')}
					</g:form_label>
				</div>	
				<g:ui_choicelist
					name="input_ws1_assist_type"
					id="input_ws1_assist_type"
					table="incident"
					mandatory="true"
					field="x_vmw_ws1uem_ws1_uem_assist_type"
					query="active=true"
					size="10"/>
			</div>
		</div>
		
		<div id="div_ws1_check" class="section" hidden="false">
			<div class="confirm-field">
				<g:form_label class="no-margin">
					<strong>${gs.getMessage('WS1UEMConfirm')}</strong>
				</g:form_label>
				<span class="input-group-checkbox">
					<input
						   type="checkbox"
						   class="checkbox"
						   name="input_ws1_check"
						   id="input_ws1_check"
						   onclick="checkStatus(this)"
						   style="margin: 0"/>
					<label for="input_ws1_check" class="checkbox-label"></label>
				</span>
			</div>
			
		</div>
	</div>
			   
    <g:dialog_buttons_ok_cancel
		ok_id="submitData"
		ok="return continueOK()"
		ok_type="submit" 
		ok_style_class="btn btn-primary"
		cancel_type="button"
		cancel_id="cancelData"
		cancel_style_class="btn btn-default"
		cancel="return continueCancel()"/>

	</g:ui_form>
</j:jelly>]]></html>
        <name>WS1UEMPopup</name>
        <processing_script><![CDATA[/**
Run the UEM Action Flow when an action is selected
**/

var session;
var addr;
var util;
var inputs;
var message;

gs.info("Running processing script " + runprocessingscript);

if (runprocessingscript === "actionflow") {

    gs.info("Running action flow from UI Page, sid = " + sid);

    session = gs.getSession();
    addr = session.getUrlOnStack();
    gs.info("URL " + addr);

    util = new GlideRecord("incident");
    util.addQuery("sys_id", sid);
    util.query();
    if (util.next()) {
        util.x_vmw_ws1uem_ws1action = jvar_action;
        util.x_vmw_ws1uem_ws1_passcode = jvar_passcode;
        util.x_vmw_ws1uem_ws1_unlock_pin = jvar_unlockpin;
        util.x_vmw_ws1uem_ws1_send_message = jvar_messagetext;
        util.x_vmw_ws1uem_ws1_uem_assist_type = jvar_assisttype;
        util.x_vmw_ws1uem_response = jvar_string;

        if (util.update() === null) {
            gs.info("WS1UEM: update failed");

        } else {
            gs.info("WS1UEM: update succeeded");
        }


        try {
            inputs = {};
            inputs.ws1incidentnumber = util.number; // String

            gs.info("WS1UEM: calling subflow " + util.number);
//            sn_fd.FlowAPI.getRunner().subflow("x_vmw_ws1uem.ws1uemactionsubflow").inBackground().withInputs(inputs).run();

			sn_fd.FlowAPI.getRunner().subflow("x_vmw_ws1uem.ws1uemflowwrapper").inBackground().withInputs(inputs).run();

            gs.info("WS1UEM: called subflow ");	
			
        } catch (ex) {
			gs.info("WS1UEM: called subflow failed");
			message = ex.getMessage();
            gs.error(message);
        }
    } else {
        gs.info("WS1UEM: failed to call subflow as cannot find incident ");
    }

    response.sendRedirect(addr);
}
]]></processing_script>
        <sys_class_name>sys_ui_page</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-09-01 16:29:55</sys_created_on>
        <sys_id>dc841b0e1b1eb410a76c0dc0604bcb65</sys_id>
        <sys_mod_count>293</sys_mod_count>
        <sys_name>WS1UEMPopup</sys_name>
        <sys_package display_value="VMware Workspace ONE ITSM Connector" source="x_vmw_ws1uem">b110a7a11b12b41092ce8514604bcb28</sys_package>
        <sys_policy/>
        <sys_scope display_value="VMware Workspace ONE ITSM Connector">b110a7a11b12b41092ce8514604bcb28</sys_scope>
        <sys_update_name>sys_ui_page_dc841b0e1b1eb410a76c0dc0604bcb65</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-10-21 07:13:53</sys_updated_on>
    </sys_ui_page>
</record_update>
