<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_page">
    <sys_ui_page action="INSERT_OR_UPDATE">
        <category>general</category>
        <client_script><![CDATA[onLoad();

/**
WS1UEMPopup renders the dialog popup fields based on the UEM action
passed in from the calling page.
**/
function onLoad() {
	
	var ws1_actions_response;
	
	var action = $("ws1_action");

	/**
	For debugging purposes, if an action is not provided,
	Test values are loaded in from the WS1 Testing table.
	**/
	if ((!action) || (action.value.includes("Undefined"))) {
			var ga_test_action = new GlideAjax('x_vmw_ws1uem.WS1GetTestAction');
			var ga_test_json = new GlideAjax('x_vmw_ws1uem.WS1TestOSActionsJSON');
		
			ga_test_action.addParam('sysparm_name', 'get_test_action');
			ga_test_json.addParam('sysparm_name', 'get_test_json');
		
			ga_test_action.getXML(function parse_response(response) {
				action = response.responseXML.documentElement.getAttribute('answer');
				ws1_actions_response = {};
				
				ga_test_json.getXML(function parse_json_response(response) {
					ws1_actions_response = response.responseXML.documentElement.getAttribute('answer');

					try {
						ws1_actions_response = JSON.parse(ws1_actions_response);
					} catch(e) {
						ws1_actions_response = {};
					}
					
					loadPopupContents(action, ws1_actions_response);
				});
			});
	} else {
		/**
		A JSON containing UEM configurations for an OS will be loaded in 
		from the incidents page, previously stored by the the loading method.
		**/
		ws1_actions_response = $("incident.x_vmw_ws1uem_ws1_actions_response");
		
		ws1_actions_response = JSON.parse(ws1_actions_response.value);
		
		loadPopupContents(action.value, ws1_actions_response);
	}
}

/**
Based on the provided UEM Action configuration, set the state of
specific fields and as hidden or visible.
**/
function loadPopupContents(action, ws1_actions_response) {
	var stringText;

	set_message_state(true);
	set_unlock_passcode_state(true);
	set_unlock_pin_state(true);
	$("div_ws1_caption").hidden = true;
	set_ws1_check_state(true);

	action = action.trim();

	if (action == "assist") {
		
		stringText = getMessage('WS1UEMAssistInfo');
		
		var console_version = $("ws1_version");
						
		$("div_ws1_assist_type").hidden = false;

		var select_dropdown_id = "input_ws1_assist_type";

		var input_options = [];
		for (var key in ws1_actions_response) {
			
			if (key.includes('assist_')) {
				
				if (ws1_actions_response[key] == false) {
					
					remove_actions_from_select_input(select_dropdown_id, key.substring(7));
					
				} else {
					input_options.push(key.substring(7));
				}
			}
		}
		input_options.sort().reverse();

		if ($("input_ws1_assist_type").length == 0) {
			$("div_ws1_assist_type").hidden = true;
		} else {
			set_action_as_main_select_input(select_dropdown_id, input_options[0]);
		}
	} else if (action == "message") {
		
		stringText = getMessage('WS1UEMMessageInfo');
		
		$("submitData").disabled = true;
		
		set_message_state(false);

	} else if (action == "devicelogs") {
		
		stringText = getMessage('WS1UEMDeviceLogsInfo');
	
	} else if (action == "changepasscode") {
		
		stringText = getMessage('WS1UEMPasscodeInfo');
		
		$("submitData").disabled = true;
	
		set_unlock_passcode_state(false);
	
	} else if (action == "lock") {
		
		stringText = getMessage('WS1UEMLockInfo');
		
		if (ws1_actions_response["lock_mac"] == true) {
			$("submitData").disabled = true;

			set_unlock_pin_state(false);
			$("div_ws1_caption").hidden = false;
			$("div_ws1_caption").innerHTML = '<g:form_label class="warning-text">' + getMessage('WS1UEMRememberPin')  + '</g:form_label>';
		}
	} else if (action == "enterprisewipe") {

		stringText = getMessage('WS1UEMEnterpriseWipeInfo');
		
		set_ws1_check_state(false);
		
		$("submitData").disabled = true;
		$("div_ws1_caption").hidden = false;
		$("div_ws1_caption").innerHTML = '<g:form_label style="color:red;">' + getMessage('WS1UEMWarningEnterpriseWipe')  + '</g:form_label>';
	
	} else if (action == "softreset") {
		
		stringText = getMessage('WS1UEMSoftResetInfo');
	
	} else if (action == "syncdevice") {
		
		stringText = getMessage('WS1UEMSyncDeviceInfo');
		
	} else if (action == "devicewipe") {
		
		stringText = getMessage('WS1UEMDeviceWipeInfo');

		var warningMessage = getMessage('WS1UEMWarningDeviceWipe');	
		
		if (ws1_actions_response["devicewipe_mac"] == true) {
			
			$("submitData").disabled = true;
			
			set_unlock_pin_state(false);
			
			warningMessage = warningMessage + " " + getMessage('WS1UEMRememberPin');
			
		} else {
			
			set_ws1_check_state(false);
			
			$("submitData").disabled = true;
		}
		
		$("div_ws1_caption").hidden = false;
		$("div_ws1_caption").innerHTML = '<g:form_label style="color:red;">' + warningMessage  + '</g:form_label>';
	}
	else if (action == "refreshdevices") {
		
		stringText = getMessage('WS1UEMRefreshDevices');
	}
	
	// display informational message for action type
	$("div_ws1_text").innerHTML = stringText;
	$("div_ws1_text").hidden = false;
}

function continueOK() {
	
	var action_inputs = {};
	
	action_inputs['action'] = gel('ws1_action').value;
	
	var unlockpin = "";
	for (var i=0; i<6; i++) {
		
		var pinid = 'input_ws1_unlock_pin' + i;
		
		var unlockpinitem = gel(pinid).value;
		
		unlockpin = unlockpin + unlockpinitem;
	}
	
	action_inputs['unlockpin'] = unlockpin;
	action_inputs['passcode'] = gel('input_ws1_passcode').value;
	action_inputs['message'] = gel('input_ws1_message').value;
	action_inputs['assisttype'] = gel('input_ws1_assist_type').value;
	var sid = gel('sid').value;

	try {
		sid = g_form.getUniqueValue();
		execute_action(sid, action_inputs, true);
	} catch(e) {
			sid = get_test_incident_record(action_inputs);
	}
}

function continueCancel() {
	GlideDialogWindow.get().destroy();
}

function execute_action(sid, action_inputs, set_form) {
	var str = getMessage('WS1UEMQueuing') + " " + getMessage('WS1UEMAction');
	
	if (set_form == true) {
		// Set the values back to the incident form
		g_form.setValue("x_vmw_ws1uem_ws1_send_message", action_inputs['message']); 
		g_form.setValue("x_vmw_ws1uem_ws1_passcode", action_inputs['passcode']); 
		g_form.setValue("x_vmw_ws1uem_ws1_unlock_pin", action_inputs['unlockpin']); 
		g_form.setValue("x_vmw_ws1uem_ws1action", action_inputs['action']); 
		g_form.setValue("x_vmw_ws1uem_ws1_uem_assist_type", action_inputs['assisttype']); 
		g_form.setValue("x_vmw_ws1uem_response", str); 
		g_form.save();
	}
	
	var app = new GlideRecord("incident");
	if(app.get(sid)){
		app.x_vmw_ws1uem_ws1action = action_inputs['action'];
		app.x_vmw_ws1uem_ws1_passcode = action_inputs['passcode'];
		app.x_vmw_ws1uem_ws1_unlock_pin = action_inputs['unlockpin'];
		app.x_vmw_ws1uem_ws1_send_message = action_inputs['message'];
		app.x_vmw_ws1uem_ws1_uem_assist_type = action_inputs['assisttype'];
		app.x_vmw_ws1uem_response = str;
		app.update();
	}

	if (action_inputs['action'] == 'refreshdevices') {
		document.getElementById("runprocessingscript").value = "refreshdevices";
	}
	else {
		document.getElementById("runprocessingscript").value = "actionflow";
	}
	document.getElementById("sid").value = sid;
	
	if (set_form == true) {
		GlideDialogWindow.get().destroy();
	}
}

/**
A test incident record will need to be obtained
if the application is being debugged with ATF tests.
**/
function get_test_incident_record(action_inputs) {
    var ga_test_incident = new GlideAjax('x_vmw_ws1uem.WS1GetIncidentRecord');
    ga_test_incident.addParam('sysparm_name', 'get_incident');

    var incident_record = null;
    ga_test_incident.getXML(function parse_response(response) {
        incident_record = response.responseXML.documentElement.getAttribute('answer');
        execute_action(incident_record, action_inputs, false);
    });
}

/**
Version strings are compared level-by-level
between sub-versions strings in each.
**/
function util_compare_versions(version_a, version_b) {
	var sub_versions_a = version_a.split(".").map(Number);
	var sub_versions_b = version_b.split(".").map(Number);
			
	if (sub_versions_a.length < sub_versions_b.length) {
		sub_versions_a = sub_versions_a.concat(Array(sub_versions_b.length - sub_versions_a.length).fill(0));
	} else 	if (sub_versions_b.length < sub_versions_a.length) {
		sub_versions_b = sub_versions_b.concat(Array(sub_versions_a.length - sub_versions_b.length).fill(0));
	}
	
	for (var i = 0; i < Math.min(sub_versions_a.length, sub_versions_b.length); i++) {
		if (sub_versions_a[i] > sub_versions_b[i]) {
			return 1;
		}
		
		if (sub_versions_a[i] < sub_versions_b[i]) {
			return -1;
		}
	}
	
	return 0;
}

function parse_actions_as_json(response) {
	var answer = response.responseXML.documentElement.getAttribute("answer");
	
	var actions = JSON.parse(answer);
	
	if (actions['devicewipe_mac'] == true) {
		set_unlock_pin_state(false);
	} else {
		set_unlock_pin_state(true);
	}
	
	if (actions['changepasscode_winrt'] == true) {
		set_unlock_pin_state(false);
	} else {
		set_unlock_pin_state(true);
	}
}

/**
Remove dropdown menu items by option name
**/
function remove_actions_from_select_input(select_input, option_name) {
	var selectobject = $(select_input);
	
	for (var i=0; i<selectobject.length; i++) {
		if (selectobject.options[i].value.toLowerCase() == option_name) {
			selectobject.remove(i);
		}
	}
}

/**
Set a dropdown menu item as default
**/
function set_action_as_main_select_input(select_input, option_name) {
	var selectobject = $(select_input);
	
	for (var i=0; i<selectobject.length; i++) {
		
		if (selectobject.options[i].value.toLowerCase() == option_name) {
			selectobject.value  = selectobject.options[i].value;
		}
	}
}

/**
Validate that a 6-pin field has
non-empty values within valid range.
**/
function validatePin(pin, nextIndex) {
	
	var validPin = true;
	for (var i = 0; i < 6; i++) {
		
		var currentPinId = 'input_ws1_unlock_pin' + i;
		
		currentPinValue = gel(currentPinId).value;
		
		if (currentPinValue === "") {
			validPin = false;
		}
		else {
			var pinInt = parseInt(currentPinValue);
			if (isNaN(currentPinValue) || (pinInt < 0 || pinInt > 9)) {
				validPin = false;
				gel(currentPinId).value = "";
			}
			else {
				if (pin.id === currentPinId) {
					var nextPin = 'input_ws1_unlock_pin' + nextIndex;
					gel(nextPin).focus();
				}
			}
		}
	}
	if (validPin === true) {
		$("submitData").disabled = false;
	}
	else {
		$("submitData").disabled = true;
	}
}

/**
Validate that the passcode and confirm-passcode fields match
**/
function validatePasscode() {
	var passcode = gel('input_ws1_passcode').value;
	var passcodeConfirm = gel('input_ws1_passcode_confirm').value;

	if (passcode.length > 0 && passcode == passcodeConfirm) {
		$("submitData").disabled = false;
	}
	else {
		$("submitData").disabled = true;
	}
}

/**
Validate that the message field is non-empty
**/
function checkMessage() {
	var message = gel('input_ws1_message').value;

	if (message.length > 0) {
		$("submitData").disabled = false;
	}
	else {
		$("submitData").disabled = true;
	}
}

/**
Set the state of fields on the UEM dialog popup
**/
function checkStatus(cb) {
	$("submitData").disabled = !cb.checked;
}

function set_unlock_pin_state(state) {
	$("div_ws1_unlock_pin").hidden = state;
	var inputs = document.querySelector('#div_ws1_unlock_pin').getElementsByTagName('input');
	for(var i = 0; i < inputs.length; i++) {
		inputs[i].readOnly = state;
	}
}

function set_unlock_passcode_state(state) {
	$("div_ws1_passcode").hidden = state;
	var inputs = document.querySelector('#div_ws1_passcode').getElementsByTagName('input');
	for(var i = 0; i < inputs.length; i++) {
		inputs[i].readOnly = state;
	}
}

function set_message_state(state) {
	$("div_ws1_message").hidden = state;
	var inputs = document.querySelector('#div_ws1_message').getElementsByTagName('textarea');
	inputs[0].readOnly = state;
}

function set_ws1_check_state(state) {
	$("div_ws1_check").hidden = state;
	var inputs = document.querySelector("#div_ws1_check").getElementsByTagName('input');
	inputs[0].readOnly = state;
}]]></client_script>
        <description>Popup to enable WS1 UEM details to be captured</description>
        <direct>false</direct>
        <endpoint>x_vmw_ws1uem_WS1UEMPopup.do</endpoint>
        <html><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">
<g:ui_form>
	<style>
		.body {
			margin: 15px 10px 10px 10px;
		}
		
		.caption-section {
			margin: 15px 0;
		}
		
		.warning-caption {
			border: 1px solid red;
			border-radius: 0.3em;
			padding: 5px;
		}
		
		.section {
			margin: 10px 0;
		}
		
		.passcode-field {
			display: flex;
			align-items: center;
			margin-top: 0.5em;
		}
		
		.passcode-label {
			min-width: 30%;
		}
		
		.pin-field {
			display: flex;
			align-items: center;
		}
		
		.pin-digit {
			text-align: center;
			margin: 0 2px;
		}
		
		.no-margin {
			margin: 0;
		}
		
		.warning-text {
			color: red;
		}
	</style>

	<g:evaluate var="jvar_ws1_action" expression="RP.getWindowProperties().actionvalue" />
	<g:evaluate var="jvar_si" expression="RP.getWindowProperties().si" />
	<div sn-atf-class="SettableTestComponent">
		<input sn-atf-settable="true" type="hidden" id="ws1_action" name="ws1_action" value="${jvar_ws1_action}" />
		<input sn-atf-settable="true" type="hidden" id="sid" name="sid" value="${jvar_si}" />		
		<input type="hidden" id="runprocessingscript" name="runprocessingscript" value=""/>
		<input type="hidden" id="ws1_version" name="ws1_version" value="${gs.getProperty('x_vmw_ws1uem.WS1UEM Platform')}"/>
	</div>
	
	<div class="body">
		<div id="div_ws1_text" hidden="true" />

		<div id="div_ws1_caption" class="caption-section" hidden="true" />

		<div id="div_ws1_message" class="section" hidden="true">
			<g:form_label>
				${gs.getMessage('WS1UEMMessageToSend')}
			</g:form_label>
			<textarea
				id="input_ws1_message"
				name="input_ws1_message"
				field="x_vmw_ws1uem_ws1_send_message"
				rows="5"
				cols="60"
				table="incident"
				mandatory="true"
				query="active=true"
				oninput="checkMessage()"
				onchange="checkMessage()">
			</textarea>
		</div>
		
		<div id="div_ws1_passcode" class="section" hidden="true">
			<div class="passcode-field">
				<div class="passcode-label">
					<g:form_label class="no-margin">
						${gs.getMessage('WS1UEMPasscode')}
					</g:form_label>
				</div>	
				<input
					id="input_ws1_passcode"
					name="input_ws1_passcode"
					field="x_vmw_ws1uem_ws1_passcode"
					type="password"
					table="incident"
					query="active=true"
					size="20"
					oninput="validatePasscode()"
					onchange="validatePasscode()"/>
			</div>
			<div class="passcode-field">
				<div class="passcode-label">
					<g:form_label class="no-margin">
						${gs.getMessage('WS1UEMConfirmPasscode')}
					</g:form_label>
				</div>	
				<input
					id="input_ws1_passcode_confirm"
					name="input_ws1_passcode_confirm"
					field="x_vmw_ws1uem_ws1_passcode"
					type="password"
					table="incident"
					query="active=true"
					size="20"
					oninput="validatePasscode()"
					onchange="validatePasscode()"/>
			</div>
		</div>
		
		<div id="div_ws1_unlock_pin" class="section" hidden="true">
			<div class="pin-field">
				<div class="passcode-label">
					<g:form_label class="passcode-label no-margin">
						${gs.getMessage('WS1UEMUnlockPin')}
					</g:form_label>
				</div>

				<input class="pin-digit" type="text" name="input_ws1_unlock_pin0" id="input_ws1_unlock_pin0" table="incident" mandatory="true"   field="x_vmw_ws1uem_ws1_unlock_pin" query="active=true" size="1" maxlength="1" oninput = "validatePin(this, 1)" />
				<input class="pin-digit" type="text" name="input_ws1_unlock_pin1" id="input_ws1_unlock_pin1" table="incident" mandatory="true"   field="x_vmw_ws1uem_ws1_unlock_pin" query="active=true" size="1" maxlength="1" oninput = "validatePin(this, 2)" />
				<input class="pin-digit" type="text" name="input_ws1_unlock_pin2" id="input_ws1_unlock_pin2" table="incident" mandatory="true"   field="x_vmw_ws1uem_ws1_unlock_pin" query="active=true" size="1" maxlength="1" oninput = "validatePin(this, 3)" />
				<input class="pin-digit" type="text" name="input_ws1_unlock_pin3" id="input_ws1_unlock_pin3" table="incident" mandatory="true"   field="x_vmw_ws1uem_ws1_unlock_pin" query="active=true" size="1" maxlength="1" oninput = "validatePin(this, 4)" />
				<input class="pin-digit" type="text" name="input_ws1_unlock_pin4" id="input_ws1_unlock_pin4" table="incident" mandatory="true"   field="x_vmw_ws1uem_ws1_unlock_pin" query="active=true" size="1" maxlength="1" oninput = "validatePin(this, 5)" />
				<input class="pin-digit" type="text" name="input_ws1_unlock_pin5" id="input_ws1_unlock_pin5" table="incident" mandatory="true"   field="x_vmw_ws1uem_ws1_unlock_pin" query="active=true" size="1" maxlength="1" oninput = "validatePin(this, '5')" />
				
			</div>
		</div>
		
		<div id="div_ws1_assist_type" class="section" hidden="false">
			<span style="display:inline-block; width:40%">
				<g:form_label>
					${gs.getMessage('WS1UEMAssistType')}
				</g:form_label>
			</span>	
			<g:ui_choicelist name="input_ws1_assist_type" id="input_ws1_assist_type" table="incident" mandatory="true"   field="x_vmw_ws1uem_ws1_uem_assist_type" query="active=true" size="10"/>
		</div>
		
		<div id="div_ws1_check" class="section" hidden="false">
			<span style="display:inline-block; width:40%">
				<g:form_label>
					${gs.getMessage('WS1UEMConfirm')}
				</g:form_label>
				<input style="margin:10px" type="checkbox" name="input_ws1_check" id="input_ws1_check" onclick = "checkStatus(this)"/>
			</span>
		</div>
	</div>
			   
    <g:dialog_buttons_ok_cancel
		ok_id="submitData"
		ok="return continueOK()"
		ok_type="submit" 
		ok_style_class="btn btn-primary"
		cancel_type="button"
		cancel_id="cancelData"
		cancel_style_class="btn btn-default"
		cancel="return continueCancel()"/>

	</g:ui_form>
</j:jelly>]]></html>
        <name>WS1UEMPopup</name>
        <processing_script><![CDATA[if(runprocessingscript == 'actionflow'){
	
    gs.info("Running action flow from UI Page");
    gs.info("sid value " + sid);

	var session = gs.getSession();
	var addr = session.getUrlOnStack();
	gs.info("URL " + addr);
		
	var util = new GlideRecord('incident');
	if(util.get(sid)) {
		try {
			var inputs = {};
			inputs['current'] = util; // GlideRecord of table:  
			inputs['table_name'] = 'incident';

			// Start Asynchronously: Uncomment to run in background.
			sn_fd.FlowAPI.getRunner().flow('x_vmw_ws1uem.ws1uemactionflow').inBackground().withInputs(inputs).run();
//		var outputs = sn_fd.FlowAPI.executeFlow('x_vmw_ws1uem.ws1uemactionflow', inputs, 60000);
//		var output = outputs['output'];
				
			// Execute Synchronously: Run in foreground.
	//		sn_fd.FlowAPI.getRunner().flow('x_vmw_uemconn_0.ws1uemactionfromscript').inForeground().withInputs(inputs).run();
		
		} catch (ex) {
			var messages = ex.getMessage();
			gs.info('Error in processing script ' + messages);
		}
	}
   response.sendRedirect(addr);
}

if(runprocessingscript == 'refreshdevices'){
	// Update message on screen

	util = new GlideRecordSecure('incident');
	if(util.get(sid)) {
		gs.info("Refreshdevices ");

		// call the flow to get all devices for this caller and add them if they don't exist
		try {
			inputs = {};
			inputs['current'] = util; // GlideRecord of table:  
			inputs['table_name'] = 'incident';
	
			// Start Asynchronously: Uncomment to run in background.
			sn_fd.FlowAPI.getRunner().flow('x_vmw_ws1uem.ws1uemrefreshdevices').inBackground().withInputs(inputs).run();
				
			// Execute Synchronously: Run in foreground.
			// sn_fd.FlowAPI.getRunner().flow('x_vmw_ws1uem.ws1uemrefreshdevices').inForeground().withInputs(inputs).run();
		
		} catch (ex) {
			var message = ex.getMessage();
			gs.error(message);
		}

		session = gs.getSession();
		addr = session.getUrlOnStack();
	}
	response.sendRedirect(addr);
}]]></processing_script>
        <sys_class_name>sys_ui_page</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-09-01 16:29:55</sys_created_on>
        <sys_id>dc841b0e1b1eb410a76c0dc0604bcb65</sys_id>
        <sys_mod_count>126</sys_mod_count>
        <sys_name>WS1UEMPopup</sys_name>
        <sys_package display_value="VMware Workspace ONE ITSM Connector" source="x_vmw_ws1uem">b110a7a11b12b41092ce8514604bcb28</sys_package>
        <sys_policy/>
        <sys_scope display_value="VMware Workspace ONE ITSM Connector">b110a7a11b12b41092ce8514604bcb28</sys_scope>
        <sys_update_name>sys_ui_page_dc841b0e1b1eb410a76c0dc0604bcb65</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-09-28 05:16:52</sys_updated_on>
    </sys_ui_page>
</record_update>
